library std;
use std.standard.all;
library ieee;
use ieee.std_logic_1164.all; 
library ieee;
use ieee.numeric_std.all;
 
entity memory_d is 
  port (MW, CLK : in std_logic;
  			-- MRD : in std_logic;
        mem_add : in std_logic_vector(15 downto 0);   
        mem_di  : in std_logic_vector(15 downto 0);   
        mem_do  : out std_logic_vector(15 downto 0));  
end entity; 

architecture membehave of memory_d is 
	type RAM is array(0 to ((256)-1)) of std_logic_vector(15 downto 0);
	signal storage: RAM := (	
		--report "mem init in memory";
		1 => "0000000000000100", 
		2 => "0001001000000010",   
		3 => "0011001000000000", 
		4 => "0100000001000000", 
		5 => "0101010001000001", 
		6 => "1100011001000010", 
		7 => "1000010000000100", 				
		8 => "1000010000000100", 
		10 => "0000000001010010", 
		11 => "0000000001010000", 
		others=>(others=>'1'));

	
	begin
	process(CLK, mem_add, MW) 
		begin
			report "mem_add memory:"&integer'image(to_integer(unsigned(mem_add)));
			if rising_edge(CLK) then
				if MW = '1' then
					report "mw 1 mem_add in memory  :"&integer'image(to_integer(unsigned(mem_add)));
					storage(to_integer(unsigned(mem_add))) <= mem_di;
				end if;
			end if;
			 	
			-- if MRD = '1' then 
			    report "MRD 1 mem_add in memory :"&integer'image(to_integer(unsigned(mem_add)));
				mem_do <= storage(to_integer(unsigned(mem_add)));
			-- end if;
			
	end process; 
end membehave;

