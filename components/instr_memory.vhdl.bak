library std;
use std.standard.all;
library ieee;
use ieee.std_logic_1164.all; 
library ieee;
use ieee.numeric_std.all; 

--        ----------------------------------Instruction memory ----------------------
entity instrMemory is 
  port (ins_init: in std_logic; 
 		
	  	-- IMRD : in std_logic;
        pc_in : in std_logic_vector(15 downto 0);   -- mem_add   
        mem_io  : out std_logic_vector(15 downto 0));  
end entity; 
architecture membehave of instrMemory is 
	type RAM is array(0 to ((256)-1)) of std_logic_vector(15 downto 0);
	signal storage: RAM;
	begin
	process(ins_init,pc_in,storage) 
		begin 
			report "mem_add memory:"&integer'image(to_integer(unsigned(pc_in)));
			if (ins_init = '1') then
			 	report "mem init in memory memory";
				storage(1) <= "0001001010011000"; -- ADA R1 = R2 + R3 
				storage(2) <= "0000010011000100"; -- ADI R2 = R3 + 4  
				storage(3) <= "0010010011101000"; -- NDU R2 = R3 NAND R5
				storage(4) <= "0010010011101100"; -- NCU R2 = R3 NAND ~R5
				storage(5) <= "0101010001000001"; -- SW R2 = 4 , mem_add = r1(0) + imm6(1), now storage(1) = 4;
				storage(6) <= "1100011001000010"; -- BEQ R3 =  R2 , pc update to pc(5)+ imm(2), now pc = 7
				storage(7) <= "1000010000000100"; -- jal R2 = 6 , R7 to PC+4;				
				storage(8) <= "1000010000000100"; -- jal R2 = 7 , R7 to PC+4;
				storage(10) <="0000000001010010"; -- ADC R2 = 4 , if prev carry is 1 
				storage(11) <="0000000001010000"; -- ADD R2 =4
			end if;
			 
			    report "MRD 1 mem_add in memory :"&integer'image(to_integer(unsigned(pc_in)));
				mem_io <= storage(to_integer(unsigned(pc_in)));
		
	end process; 
end membehave;
	