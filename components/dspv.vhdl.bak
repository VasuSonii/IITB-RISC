library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
entity DSPV is
    port (
        clk:in std_logic;
        Instruction:out std_logic_vector(3 downto 0)
    );
end entity DSPV;
architecture rtl of DSPV is


    -- opcodes of all instruction
    constant OC_ADA : std_logic_vector(3 downto 0)	    :="0001";
	constant OC_ADC : std_logic_vector(3 downto 0)	    :="0001";
	constant OC_ADZ : std_logic_vector(3 downto 0)	    :="0001";
	constant OC_AWC  : std_logic_vector(3 downto 0)	    :="0001";
	constant OC_ACA   : std_logic_vector(3 downto 0)	:="0001";
	constant OC_ACC  : std_logic_vector(3 downto 0)	    :="0001";
	constant OC_ACZ   : std_logic_vector(3 downto 0) 	:="0001";
	constant OC_ACW  : std_logic_vector(3 downto 0)		:="0001";
	constant OC_ADI  : std_logic_vector(3 downto 0)	    :="0000";
	constant OC_NDU  : std_logic_vector(3 downto 0)	    :="0010";
	constant OC_NDC  : std_logic_vector(3 downto 0)	    :="0010";
    constant OC_NDZ : std_logic_vector(3 downto 0)	    :="0010";
	constant OC_NCU : std_logic_vector(3 downto 0)	    :="0010";
	constant OC_NCC : std_logic_vector(3 downto 0)	    :="0010";
	constant OC_NCZ  : std_logic_vector(3 downto 0)	    :="0010";
	constant OC_LLI  : std_logic_vector(3 downto 0)		:="0011";
	constant OC_LW   : std_logic_vector(3 downto 0)		:="0100";
	constant OC_SM   : std_logic_vector(3 downto 0)		:="0101";
	constant OC_LM   : std_logic_vector(3 downto 0)		:="0110";
	constant OC_SM  : std_logic_vector(3 downto 0)	    :="0111";
	constant OC_BEQ  : std_logic_vector(3 downto 0)	    :="1000";
	constant OC_BLT  : std_logic_vector(3 downto 0)	    :="1001";
    constant OC_BLE : std_logic_vector(3 downto 0)	    :="1001";
	constant OC_JAL : std_logic_vector(3 downto 0)	    :="1100";
	constant OC_JLR : std_logic_vector(3 downto 0)	    :="1101";
	constant OC_JRI  : std_logic_vector(3 downto 0)	    :="1111";

-------------------------components----------------------------------------------
--------------------------Register File ----------------------

    component RF is 
        port(	
            rf_write:in std_logic;
            rf_a1:in std_logic_vector(2 downto 0); --A
            rf_a2:in std_logic_vector(2 downto 0); --B
            rf_a3:in std_logic_vector(2 downto 0); --D
            rf_d1:out std_logic_vector(15 downto 0);
            rf_d2:out std_logic_vector(15 downto 0);
            rf_d3:in std_logic_vector(15 downto 0);
            pc_in:in std_logic_vector(15 downto 0);
            pc_en:in std_logic;
            pc_out:out std_logic_vector(15 downto 0);
            clk, rst:in std_logic
        );
    end component;

-------------------------------------------------------------
--------------------------ALU1---------------------------------------------

    component alu1 is 
        port(
            czcontrol = in std_logic_vector(1 downto 0);
            cpl = in std_logic_vector(0 downto 0);
            czin = in std_logic_vector(1 downto 0);
            opcode : in std_logic_vector(3 downto 0);
            a,b : in std_logic_vector(15 downto 0);
            aluout = out std_logic_vector(15 downto 0);
            czout = out std_logic_vector(1 downto 0);
        );
    end component;

    -------------------------------------------------------------------------
    -----------------------------ALU2------------------------------------

    component alu2 is 
        port(
            a : in std_logic_vector(15 downto 0);
            b : in std_logic_vector(15 downto 0);
            alu2out : out std_logic_vectot(15 downto 0);
        );
    end component ;

     -------------------------------------------------------------------------
    -----------------------------ALU3------------------------------------

    component alu3 is 
        port(
            a : in std_logic_vector(15 downto 0);
            b : in std_logic_vector(15 downto 0);
            alu3out : out std_logic_vectot(15 downto 0);
        );
    end component;

     -------------------------------------------------------------------------
    -----------------------------instr_memory------------------------------------
    component instrMemory is
        port(
            ins_init: in std_logic; 
 		
	  	-- IMRD : in std_logic;
        pc_in : in std_logic_vector(15 downto 0);   -- mem_add   
        mem_io  : out std_logic_vector(15 downto 0)

        );
    end component;
    -------------------------------------------------------------------------
    -----------------------------PIPE1------------------------------------

    component pipe1 is 
        port(
            pc_in : in std_logic_vector(15 downto 0);
            mem_io : in std_logic_vector(15 downto 0);
            clr : in std_logic;
            wr : in std_logic;
            data_out : out std_logic_vector(31 downto 0);
            clk : in std_logic;
        );
    end component;

    -------------------------------------------------------------------------
    -----------------------------PIPE2------------------------------------
        component pipe2 is 
            port(
                data_in : in std_logic_vector(31 downto 0);
                clr : in std_logic;
                wr : in std_logic;
                data_out : out std_logic_vector(31 downto 0);
                clk : in std_logic;
              );
        end component;

    -------------------------------------------------------------------------
    -----------------------------PIPE3------------------------------------
        component pipe3 is 
            port(
                data31_9 : in std_logic_vector(22 downto 0);
                data8_0 : in std_logic_vector(8 downto 0);
                data47_32 : in std_logic_vector(15 downto 0);
                data63_42 : in std_logic_vector(15 downto 0);
                clr : in std_logic;
                wr : in std_logic;
                data_out : out std_logic_vector(63 downto 0);
                clk : in std_logic;
            );
        end component;
    -------------------------------------------------------------------------
    -----------------------------PIPE4------------------------------------
        component pipe4 is 
            port(
                data63_9  : in std_logic_vector(47 downto 0);            -- ins(15-9) + pc + dataA1 + dataA2
  data8_0 : in std_logic_vector(8 downto 0);               -- these 9 bits are shifted and usd in LM
  data79_64 : in std_logic_vector(15 downto 0);            -- alu output
  data81_80 : in std_logic_vector(1 downto 0);             -- cz of alu1
  data84_82 : in std_logic_vector(2 downto 0);             -- 3 bits used only in LM 
  
  data_out : out std_logic_vector(84 downto 0);
  clk : in std_logic;

           );
        end component;
    -------------------------------------------------------------------------
    -----------------------------PIPE5------------------------------------
        component pipe5 is 
            port(
                data81_0: in std_logic_vector(81 downto 0);
  data97_82: in std_logic_vector(15 downto 0);
  clr : in std_logic;
  wr : in std_logic;
  data_out : out std_logic_vector(97 downto 0);
  clk : in std_logic;
          );
        end component;
------------------------------------------------------------------------------
----------------------------memory data ------------------------------------
        component memory_d is
            port (  MW, CLK, MRD : in std_logic;
                    mem_add : in std_logic_vector(15 downto 0);   
                    mem_di  : in std_logic_vector(15 downto 0);   
                    mem_do  : out std_logic_vector(15 downto 0)
                );  
            end component;
------------------------------------------------------------------------------
----------------------------zero extender 6 ------------------------------------
        component zero_ext6 is 
        port (in6 : in std_logic_vector(5 downto 0);   
              out6  : out std_logic_vector(15 downto 0));
        end component ;
------------------------------------------------------------------------------
----------------------------zero extender 9------------------------------------
            component zero_ext9 is 
            port (in9 : in std_logic_vector(8 downto 0);   
                  out9  : out std_logic_vector(15 downto 0)); 
            end component;

------------------------------------------------------------------------------
----------------------------sign extender 9------------------------------------
            component sig_ext9 is 
            port (in9 : in std_logic_vector(8 downto 0);   
                  out9  : out std_logic_vector(15 downto 0));  
            end component;
------------------------------------------------------------------------------
----------------------------sign extender 6------------------------------------
            component sig_ext6 is        
            port (in6 : in std_logic_vector(5 downto 0);   
            out6  : out std_logic_vector(15 downto 0));  
            end component;
------------------------------------------------------------------------------
----------------------------1bit shifter------------------------------------
            component one_bit_shifter is 
                port(
                    inp_bit_shifter : in std_logic_vector(8 downto 0);
                    out_bit_shifter : out std_logic_vector(8 downto 0)
                );
                end component;
------------------------------------------------------------------------------
----------------------------1 subtractor------------------------------------
        component one_subtractor is 
            port(
                lm_on   : in std_logic; 
                inp_sub : in std_logic_vector(2 downto 0);
                out_sub : out std_logic_vector(2 downto 0)
                );
        end component;
------------------------------------------------------------------------------
---------------------------- czregister ------------------------------------
component czregister is 
port(
    wr : in std_logic ;
        czrin: in std_logic_vector(1 downto 0);
        czrout:out std_logic_vector(1 downto 0)
);
end component;
----------------------------------SIGNALS----------------------------------------
-----------------------------------rf_signals-----------------------------------
signal sig_pc_out : std_logic_vector(15 downto 0);
signal sig_rf_d1 : std_logic_vector(15 downto 0);
signal sig_rf_d2 : std_logic_vector(15 downto 0);
signal sig_rf_d3 : std_logic_vector(15 downto 0);
signal sig_pc_in : std_logic_vector(15 downto 0);
signal sig_rf_a1 : std_logic_vector(2 downto 0);
signal sig_rf_a2 : std_logic_vector(2 downto 0);
signal sig_rf_a3 : std_logic_vector(2 downto 0);
signal sig_rf_write: std_logic;
----------------------------ALU2------------------------------------------------
signal sig_alu2_C : std_logic_vector(15 downto 0);
signal sig_alu2_B : std_logic_vector(15 downto 0);

-----------------------------------pipe signals----------------------------------
signal sig_mem_io : std_logic_vector(15 downto 0);


signal sig_pipe1 : std_logic_vector(31 downto 0);
signal wrp1 : std_logic;
-- signal sig_instr1 : std_logic_vector(6 downto 0);

signal sig_pipe2 : std_logic_vector( 31 downto 0);
signal wrp2 : std_logic;
    -- process(done)
    signal  sig31_9p2 : std_logic_vector(22 downto 0);
    signal  sig8_0p2 : std_logic_vector(8 downto 0);
    -- signal  sig47_32p2 : std_logic_vector(15 downto 0);
    -- signal  sig63_48p2 : std_logic_vector(15 downto 0);
    -- end 
    -- process for mux1
    signal sig8_0muxp2: std_logic_vector(8 downto 0);
    -- end
    -- process for mux2
    signal sig_data1p2: std_logic_vector(15 downto 0);
    -- end
    -- process for mux3
    signal sig_data2p2: std_logic_vector(15 downto 0);
    -- end
    
signal sig_pipe3 : std_logic_vector(63 downto 0);
--signal clrp3 : std_logic;
signal wrp3 : std_logic;
    -- process done 
    signal sigSE6_ip3 : std_logic_vector(5 downto 0);
    signal sigSE9_ip3 : std_logic_vector(8 downto 0);
    signal sig47_32p3 : std_logic_vector(15 downto 0);
    signal sig63_48p3 : std_logic_vector(15 downto 0);
    signal sig_opcodep3 : std_logic_vector(3 downto 0);
    signal sig_czp3 : std_logic_vector(1 downto 0);
    signal sig_cplp3 : std_logic_vector(0 downto 0);
    signal sig8_0p3 : std_logic_vector(8 downto 0);
    signal sig63_9p3 : std_logic_vector(54 downto 0);
    signal sig_alu1_p3 : std_logic_vector(15 downto 0);
    -- end
    --component 1 subtractor
    signal sig_1b_sub : std_logic_vector(2 downto 0);
    --component 1 shifter
    signal sig_1bS : std_logic_vector(8 downto 0);
    --component sign extender
    signal  sigSE6_op3 : std_logic_vector(15 downto 0);
    signal  sigSE9_op3 : std_logic_vector(15 downto 0);
    --component alu
    signal sig_alu1_a: std_logic_vector(15 downto 0);
    signal sig_alu1_b : std_logic_vector(15 downto 0);
    signal sig_alu1_c : std_logic_vector(15 downto 0);
    --component zero extend
    signal  sigZE9_op3 : std_logic_vector(15 downto 0);

signal sig_pipe4 : std_logic_vector(84 downto 0);
signal wrp4 : std_logic;
    -- process
    signal sig47_32p4 : std_logic_vector(15 downto 0);
    signal sig63_48p4 : std_logic_vector(15 downto 0);
    signal sig79_64p4 : std_logic_vector(15 downto 0);
    signal sig81_0p4 : std_logic_vector(81 downto 0);
    signal sig_1b_sub_in : std_logic_vector(2 downto 0);
    signal sig8_p4 : std_logic_vector(0 downto 0);
    -- end
    --component memory
            signal sig_MW: std_logic_vector(0 downto 0);
            signal sig_mem_do : std_logic_vector(15 downto 0);
            signal sig_mem_di : std_logic_vector(15 downto 0);
    --component alu
        signal sig_alu5_b: std_logic_vector(15 downto 0);
        signal sig_alu5_c : std_logic_vector(15 downto 0);

signal sig_pipe5 : std_logic_vector(97 downto 0);
signal wrp5 : std_logic;
    -- process
    signal sig47_32p5 : std_logic_vector(15 downto 0);
    signal sig31_16p5 : std_logic_vector(15 downto 0);
    signal sig79_64p5 : std_logic_vector(15 downto 0);
    signal sig97_82p5 : std_logic_vector(15 downto 0);
    signal sigSE9_ip5 : std_logic_vector(8 downto 0);
    signal sigSE6_ip5 : std_logic_vector(5 downto 0);
    signal sigZE9_ip5 : std_logic_vector(8 downto 0);
    signal sig8_p5 : std_logic_vector(0 downto 0);
    signal sig11_9 : std_logic_vector(2 downto 0);
    -- end 
    --component zero extend 9
    signal sigZE9_op5 : std_logic_vector(15 downto 0);
    --component sign extend 9
    
    --component alu3 
    signal sig_alu3_c : std_logic_vector(15 downto 0);
    --component alu4
    signal sig_alu4_c : std_logic_vector(15 downto 0);
     --component sign extend 6
     


     ---- alu3_mux 

     -- we have to make a process for this
     signal sig_alu3_bmux : std_logic_vector(15 downto 0);
     --process
     signal sigSE9_op5 : std_logic_vector(15 downto 0);
     signal sigSE6_op5 : std_logic_vector(15 downto 0);
     --end
    
-----------------------------------czregister------------------------
signal sig_czinp4: std_logic_vector(1 downto 0);
signal sig_czout: std_logic_vector(1 downto 0);
-----------------------------------reset signal -------------------------------
signal rst : std_logic;
signal sig_cz_wr : std_logic;
------------------------------------------port mapping-------------------------------
begin
Register_file: RF 
               port map(
                rf_write=>sig_rf_write ,
                rf_a1=> sig_rf_a1,
                rf_a2=>sig_rf_a2,
                rf_a3=>sig_rf_a3,
                rf_d1=>sig_rf_d1,
                rf_d2=>sig_rf_d2,
                rf_d3=>sig_rf_d3,
                pc_in=> sig_pc_in,
                pc_en=>,
                pc_out=>sig_pc_out,
                clk=>clk,
                rst=>rst,

               ) ;
Instruction_Memory: instrMemory
               port map(
                ins_init=> ,
                pc_in=>sig_pc_out,
                mem_io=>sig_mem_io,
                
                ) ; 
ALU2: alu2
      port map(
        a=>sig_pc_out,
        b=>sig_alu2_B,
        alu2out=>sig_alu2_C,     
      );      
ALU1: alu1
      port map(
        czcontrol=>sig_czp3,
        cpl=>sig_cplp3,
        czin=>sig_czout,
        czout=>sig_czinp4,
        opcode=>sig_opcodep3,
        a=>sig_alu1_a,
        b=>sig_alu1_b,
        aluout=>sig_alu1_c,
        
      );                                               
Data_Memory: memory_d
             port map(
                mem_add=>sig79_64p4,
                mem_di=>sig_mem_di,
                mem_do=>sig_mem_do,
                MW=>sig_MW,

             );
ALU5 : alu2 
       port map(
        a=>sig79_64p4,
        b=>sig_alu5_b,
        alu2out=>sig_alu5_c,
       );


       
ALU3: alu3
      port map(
        b=>sig_alu3_bmux,
        a=>sig31_16p5,
        alu3out=>sig_alu3_c,
      );
 ALU4: alu3
      port map(
        b=>"000000000000010",
        a=>sig31_16p5,
        alu3out=>sig_alu4_c,
      );

PIPE1: pipe1
       port map(
        pc_in=>sig_pc_out,
        mem_io=>sig_mem_io,
        clr=>'0',
        wr=>wrp1,
        data_out=>sig_pipe1,
        clk=>clk,
                
       );
PIPE2: pipe2
       port map(
        data_in=>sig_pipe1,
        clr=>'0',
        wr=>wrp2,
        data_out=>sig_pipe2,
        clk=>clk,
                
       );    
PIPE3: pipe3
       port map(
        data31_9=>sig31_9p2,
        data8_0=>sig8_0muxp2,
        data47_32=>sig_data1p2,
        data63_42=>sig_data2p2,
        clr=>'0',
        wr=>wrp3,
        data_out=>sig_pipe3,
        clk=>clk,
                
       );  
PIPE4: pipe4
       port map(
        data63_9=>sig63_9,
        data8_0=>sig8_0,
        data79_64=>sig_alu1_p3,
        data81_80=>sig_czinp4,
        data84_82=>sig_1b_sub_in,
        wr=>wrp4,
        data_out=>sig_pipe4,
        clk=>clk,
                
       );   
PIPE5: pipe5
       port map(
        data81_0=>sig81_0p4,
        data97_82=>sig_mem_do,
        clr=>'0',
        wr=>wrp5,
        data_out=>sig_pipe5,
        clk=>clk, 
       );   
       
-- port mapping pending czregister , one_bit shifter , subtractor , SE6,9 , zero6, zero9 


-- rf_a1 mux has sig_1b_sub_in for sm  pending 

-- all process which includes lm sm are pending 
process(sig_pipe5)
    begin
        if(sig_pipe5(15 downto 12)=OC_JRI) then
            sig_pc_in <= sig79_64p5;
            sig_rf_write <= '0';
            sig_MW <= '0';
            sig_cz_wr <= '0';
        elsif(sig_pipe5(15 downto 12)=OC_JLR) then
            sig_pc_in <= sig47_32p5;
            sig_rf_write <= '0';
            sig_MW <= '0';
            sig_cz_wr <= '0';
        elsif(sig_pipe5(15 downto 12)=OC_JAL) then
            sig_pc_in <= sig_alu3_C;
            sig_rf_write <= '0';
            sig_MW <= '0';
            sig_cz_wr <= '0';
        elsif(sig_pipe5(15 downto 12)=OC_BEQ) then
            if(sig_pipe5(80 downto 80) = '1' ) then
                sig_pc_in<=sig_alu3_C;
                sig_rf_write <= '0';
                sig_MW <= '0';
                sig_cz_wr <= '0';
            end if;
        elsif(sig_pipe5(15 downto 12)=OC_BLE) then
            if(sig_pipe5(81 downto 81) = '0') then
                sig_pc_in<=sig_alu3_C;
                sig_rf_write <= '0';
                sig_MW <= '0';
                sig_cz_wr <= '0';
            end if;
        elsif (sig_pipe5(15 downto 12)=OC_BLT) then
            if(sig_pipe5(81 downto 80) = "00") then
                sig_pc_in <= sig_alu3_C;
                sig_rf_write <= '0';
                sig_MW <= '0';
                sig_cz_wr <= '0';
            end if;
        else 
            sig_pc_in <= sig_alu2_C;
        end if;
    end process;
process(sig_pipe2) 
    begin
        if(sig_pipe2(15 downto 12)=OC_ADA or sig_pipe2(15 downto 12) = OC_NDU) then
            sig_rf_a1 <= sig_pipe2(8 downto 6);
            sig_rf_a2 <= sig_pipe2(5 downto 3);
        elsif(sig_pipe2(15 downto 12) = OC_ADI  or sig_pipe2(15 downto 12) = OC_LW) then
            sig_rf_a1 <= sig_pipe2(8 downto 6);
        elsif (sig_pipe2(15 downto 12) = OC_BEQ or sig_pipe2(15 downto 12) = OC_BLT or sig_pipe2(15 downto 12) = OC_BLE or sig_pipe2(15 downto 12) = OC_JLR or sig_pipe2(15 downto 12) = OC_SW) then
            sig_rf_a1 <= sig_pipe2(8 downto 6);
            sig_rf_a2 <= sig_pipe2(11 downto 9);
        end if;
    end process;

process(sig_pipe3)
    begin 
        if(sig_pipe3(15 downto 12)=OC_LM or sig_pipe3(15 downto 12)= OC_SM) then
            sig_alu2_B <= "0000000000000000";
        else 
            sig_alu2_B <= "0000000000000010";
        end if;
        if(sig_pipe3(15 downto 12)= OC_ADA or sig_pipe3(15 downto 12)= OC_NDU) then
            if(sig_pipe2(15 downto 12)=OC_ADA or sig_pipe2(15 downto 12)=OC_NDU or sig_pipe2(15 downto 12)= OC_SW) then
                if(sig_pipe3(11 downto 9)=sig_pipe2(8 downto 6)) then
                    sig_data1p2 <= sig_alu1_C;
                elsif(sig_pipe3(11 downto 9)=sig_pipe2(5 downto 3)) then
                    sig_data1p2 <= sig_alu1_C;
                end if;
            end if;
        elsif(sig_pipe3(15 downto 12)=OC_LLI) then
            if(sig_pipe2(15 downto 12)=OC_ADA or sig_pipe2(15 downto 12)=OC_NDU or sig_pipe2(15 downto 12)= OC_SW) then
                if(sig_pipe3(11 downto 9)=sig_pipe2(8 downto 6)) then
                    sig_data1p2 <= sigZE9_op3;
                elsif(sig_pipe3(11 downto 9)=sig_pipe2(5 downto 3)) then
                    sig_data1p2 <= sigZE9_op3;
                end if;
        elsif(sig_pipe4(15 downto 12)= OC_ADA or sig_pipe4(15 downto 12)= OC_NDU) then
            if(sig_pipe2(15 downto 12)=OC_ADA or sig_pipe2(15 downto 12)=OC_NDU or sig_pipe2(15 downto 12)= OC_SW) then
                if(sig_pipe4(11 downto 9)=sig_pipe2(8 downto 6)) then
                    sig_data1p2 <= sig_pipe4(79 downto 64);
                elsif(sig_pipe4(11 downto 9)=sig_pipe2(5 downto 3)) then
                    sig_data1p2 <= sig_pipe4(79 downto 64);
                end if;
            end if;
        elsif(sig_pipe5(15 downto 12)= OC_ADA or sig_pipe5(15 downto 12)= OC_NDU) then
            if(sig_pipe2(15 downto 12)=OC_ADA or sig_pipe2(15 downto 12)=OC_NDU or sig_pipe2(15 downto 12)= OC_SW) then
                if(sig_pipe5(11 downto 9)=sig_pipe2(8 downto 6)) then
                    sig_data1p2 <= sig_pipe5(79 downto 64);
                elsif(sig_pipe5(11 downto 9)=sig_pipe2(5 downto 3)) then
                    sig_data1p2 <= sig_pipe5(79 downto 64);
                end if;
            end if;


process(sig_pipe2)
    begin 
    sig31_9p2 <= sig_pipe2(31 downto 9); 
    sig8_0p2 <= sig_pipe2(8 downto 0); 
    
    end process;
    

    process(sig_pipe3)
        begin
            sigSE6_ip3 <= sig_pipe3(5 downto 0 );
            sigSE9_ip3 <= sig_pipe3(8 downto 0 );
            sig47_32p3 <= sig_pipe3(47 downto 32);
            sig63_48p3 <= sig_pipe3(63 downto 48):
            sig_opcodep3 <= sig_pipe3(15 downto 12);
            sig_czp3 <= sig_pipe3(1 downto 0 );
            sig_cplp3 <= sig_pipe3(2);
            sig8_0p3 <= sig_pipe3(8 downto 0);
            sig63_9p3 <= sig_pipe3(63 downto 9);
    end process;


    process(sig_pipe4)
        begin 
        sig47_32p4 <= sig_pipe4(47 downto 32);
        sig63_48p4 <= sig_pipe4(63 downto 48);
        sig79_64p4 <= sig_pipe4(79 downto 64);
        sig81_0p4 <= sig_pipe4(81 downto 0);
        sig_1b_sub_in <= sig_pipe4(84 downto 82);
        sig8_p4  <= sig_pipe4(8);
    end process;

    process(sig_pipe5)
    begin
        sig47_32p5 <= sig_pipe5(47 downto 32);
        sig31_16p5 <= sig_pipe5(31 downto 16);
        sig79_64p5 <= sig_pipe5(79 downto 64);
        sig97_82p5 <= sig_pipe5(97 downto 82);
        sigSE9_ip5<= sig_pipe5(8 downto 0);
        sigSE6_ip5<= sig_pipe5(5 downto 0);
        sigZE9_ip5<= sig_pipe5(8 downto 0);
        sig8_p5<= sig_pipe5(8);
        sig11_9<= sig_pipe5(11 downto 9);
    end process; 

    process(sig_pipe1)
        begin
            Instruction <= sig_pipe1(15 downto 12);
    end process;

 end architecture rtl ;